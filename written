	David Hughes - dah2117 - Operating Systems Homework 1

1.  Exercise 1.8:
	a.  Setting the value of a timer should be privileged because the OS
		is responsible for scheduling processes on the CPU and should
		have the ability to decide how long each process should run.
	b.  Modifying the clock would need to be privileged, but reading
		should not have to be.
	c.  Clearing memory does not need to be privileged because the OS
		should grant each process autonomy over its own address
		space.  This assumes the memory to be cleared is in the
		process' address space.
	d.  Trap instructions must be privileged or else they wouldn't be
		trapped to the OS.
	e.  Turning off interrupts should be privileged because otherwise
		any process could turn off the timer and then eat up all of
		the CPU cycles in an infinite loop.
	f.  Modifying the device-status table should be privileged because
		the OS is responsible for usage of and interaction with all
		devices.
	g.  Switching from user mode to kernal mode should be privileged
		because otherwise any process could arbitrarily switch into
		kernel mode at any time, which defeats teh purpose of kernel
		mode.
	h.  Accessing I/O devices should not be privileged because the OS
		is repsonsible for making sure all processes use the I/O
		devices properly and no process should be able to touch
		physical devices without the OS' permission.

2.  Exercise 2.13:
	1.  The parameters can be loaded into registers.  This makes them
		immediately available for use in the CPU, but may limit the
		number and size of parameters that are allowed.
	2.  The parameters may be stored as a block in memory, and then the
		address of the block is loaded into a register.  This
		approach allows for an arbitrary number of arbitrarily sized
		parameters, but will be a little slower than putting all of
		the parameters in registers.
	3.  The parameters may be pushed onto the execution stack.  Again,
		this approach allows for a large number of large parameters,
		but will be slower than loading the parameters in registers
		because it involves main memory.

3.  Exercise 2.21:
	The main advantage of the microkernal approach to system design is
	increased security.  Only a minimal set of functionality runs in
	kernal mode (privileged).  This means that the number of processes
	with access to the hardware is smaller.  A smaller amount of code
	running in kernal mode means there will be fewer bugs in kernal
	mode.

	Also, microkernal operating systems benefit from modular design.  A
	simpler kernel is easier to understand, and because adding new
	functionality to the operating system requires creating a user-mode
	module, the kernel itself doesn't need to be modified.  This also
	lends itself to increased security.

	User programs and system services communicate with each other through
	message passing facilitated by the microkernal.  They never interact
	directly.

	The main disadvantage of the microkernal approach is performance.
	Many system programs that would run in kernal mode in a monolithic
	operating system run in user mode in a microkernal operating system.
	Those system programs then have to communicate with the kernal
	through message passing rather than directly, which is slower.

4.  Exercise 2.25:
	In a system like VMware, the guest operating system runs as a user
	process on top of the host operating system. VMware presents an
	interface that appears to the guest system like a physical machine,
	but really all resources must be requested from the host system.

	Really the only consideration that must be made in choosing the host
	operating system is that it must be able to support the VMware
	application.  The guest operating system instance appears as a file
	in the files system of the host operating system.  This makes
	virtualization very simple for the user.

5.  Exercise 2.26:
	The obvious benefit of the Synthesis approach is performance.
	Communication between the kernel and any outside process takes time,
	so moving important functions in the kernel space will make them run
	faster.  With a layered approach, a processes making a system call
	may have to go through many different function calls in order to get
	to the real system call code, but the Synthesis approach cuts out a
	lot of that overhead.

	On the negative side, incorporating extra functionality into the
	kernel can cause some problems.  The kernel will be more
	complicated, meaning it will be more difficult for developers to
	understand and modify, and any future modifications to the kernel
	will have to work around a lot more interconnected code.  On a
	related note, more code int the kernel means that there is a greater
	chance that bugs will be found in code that runs in privileged mode,
	meaning a greater chance of system failure.

6.	No, a bug in a child process created by calling fork cannot damage
	the parent process.  The child process will have its own address
	space, and the operating system takes great care to ensure that
	no process can access another processes' memory space without
	express permission.

7.	First of all, this is not a good technique because there is no error
	checking, but we will ignore that for now.  Second, the program
	listed will go into an infinite loop because the loop is constantly
	reading the last byte in the file and then reseting fptr right
	before the last byte of the file.  The last line in the loop body
	should be:

	fptr = lseek(fd, (off_t) -2, SEEK_CUR);

	in order to run properly.

	The real problem, though, is that this approach uses 3 system calls
	(lseek, read, and write) for every single character of the file.
	This results in significant overhead as the Operating System needs to
	be involved on every line of code in the loop body.  It would be much
	better to process the file in larger chunks to decrease the number of
	system calls required.

8.	At the most basic level, an Operating System is a resource allocator.
	The computer has a fixed amount of physical resources, and the OS is
	responsible for giving each process the resources it needs to fulfill
	its purpose.  The operating system provides useful abstractions so
	that the user processes don't need to know the specific details of
	the hardware in order to run.  From this perspective, very little is
	actually part of the operating system.  Functions such as a web
	browser or windowing system could easily be implemented as user
	programs that would then request the resources they needed (ie a 
	monitor or network connection) from the OS.  The OS itself, though,
	wouldn't need to know anything about what those requested resources
	were being used for.

	On the other hand, though, the operating system can be seen as the
	mediator between the human user and the machine, which means that
	the user experience is an important consideration in OS design.  A
	windowing system would then be viewed as an integral part of the OS
	because it enhances the user experience and makes it easier for the
	user to interact efficiently with the machine.  The same argument can
	be made about a web browser because the Operating System exists to
	allow the human user to do what he or she wants to do more easily,
	and much of what a human user wants to do involves the world wide
	web.
